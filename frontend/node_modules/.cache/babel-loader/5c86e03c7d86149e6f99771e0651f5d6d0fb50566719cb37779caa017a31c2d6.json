{"ast":null,"code":"/**\r\n * API Service for Rockfall Prediction System\r\n * Handles all communication with the Flask backend\r\n */\n\nimport axios from 'axios';\n\n// Configure axios defaults\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\nexport const rockfallAPI = {\n  // Get API status\n  getStatus: async () => {\n    try {\n      const response = await apiClient.get('/');\n      return response.data;\n    } catch (error) {\n      throw new Error(`Failed to get API status: ${error.message}`);\n    }\n  },\n  // Health check\n  checkHealth: async () => {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error(`Health check failed: ${error.message}`);\n    }\n  },\n  // Make rockfall prediction\n  predict: async sensorData => {\n    try {\n      const response = await apiClient.post('/predict', sensorData);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(`Prediction failed: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message}`);\n    }\n  },\n  // Get mock sensor data for live monitoring\n  getMockData: async () => {\n    try {\n      const response = await apiClient.get('/mock-data');\n      return response.data;\n    } catch (error) {\n      throw new Error(`Failed to get mock data: ${error.message}`);\n    }\n  },\n  // Get historical data for charts\n  getHistoricalData: async () => {\n    try {\n      const response = await apiClient.get('/historical-data');\n      return response.data;\n    } catch (error) {\n      throw new Error(`Failed to get historical data: ${error.message}`);\n    }\n  }\n};\n\n// Export utility functions\nexport const formatRiskLevel = category => {\n  const levels = {\n    Low: {\n      color: '#10b981',\n      bgColor: '#ecfdf5',\n      level: 1\n    },\n    Medium: {\n      color: '#f59e0b',\n      bgColor: '#fffbeb',\n      level: 2\n    },\n    High: {\n      color: '#ef4444',\n      bgColor: '#fef2f2',\n      level: 3\n    },\n    Critical: {\n      color: '#dc2626',\n      bgColor: '#fef2f2',\n      level: 4\n    }\n  };\n  return levels[category] || levels.Medium;\n};\nexport const formatTimestamp = timestamp => {\n  return new Date(timestamp).toLocaleString();\n};\nexport const validateSensorData = data => {\n  const requiredFields = ['slope_angle', 'joint_spacing', 'rock_strength'];\n  const missingFields = requiredFields.filter(field => !(field in data) || data[field] === '');\n  if (missingFields.length > 0) {\n    throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n  }\n\n  // Validate ranges\n  const validations = [{\n    field: 'slope_angle',\n    min: 0,\n    max: 90\n  }, {\n    field: 'joint_spacing',\n    min: 0,\n    max: 10\n  }, {\n    field: 'rock_strength',\n    min: 0,\n    max: 200\n  }];\n  for (const {\n    field,\n    min,\n    max\n  } of validations) {\n    if (data[field] !== undefined && (data[field] < min || data[field] > max)) {\n      throw new Error(`${field} must be between ${min} and ${max}`);\n    }\n  }\n  return true;\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","response","use","error","console","Promise","reject","rockfallAPI","getStatus","get","data","Error","message","checkHealth","predict","sensorData","post","_error$response","_error$response$data","getMockData","getHistoricalData","formatRiskLevel","category","levels","Low","color","bgColor","level","Medium","High","Critical","formatTimestamp","timestamp","Date","toLocaleString","validateSensorData","requiredFields","missingFields","filter","field","length","join","validations","min","max","undefined"],"sources":["D:/New RockFall/frontend/src/services/api.js"],"sourcesContent":["/**\r\n * API Service for Rockfall Prediction System\r\n * Handles all communication with the Flask backend\r\n */\r\n\r\nimport axios from 'axios';\r\n\r\n// Configure axios defaults\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Response interceptor for error handling\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const rockfallAPI = {\r\n  // Get API status\r\n  getStatus: async () => {\r\n    try {\r\n      const response = await apiClient.get('/');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get API status: ${error.message}`);\r\n    }\r\n  },\r\n\r\n  // Health check\r\n  checkHealth: async () => {\r\n    try {\r\n      const response = await apiClient.get('/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Health check failed: ${error.message}`);\r\n    }\r\n  },\r\n\r\n  // Make rockfall prediction\r\n  predict: async (sensorData) => {\r\n    try {\r\n      const response = await apiClient.post('/predict', sensorData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Prediction failed: ${error.response?.data?.error || error.message}`);\r\n    }\r\n  },\r\n\r\n  // Get mock sensor data for live monitoring\r\n  getMockData: async () => {\r\n    try {\r\n      const response = await apiClient.get('/mock-data');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get mock data: ${error.message}`);\r\n    }\r\n  },\r\n\r\n  // Get historical data for charts\r\n  getHistoricalData: async () => {\r\n    try {\r\n      const response = await apiClient.get('/historical-data');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(`Failed to get historical data: ${error.message}`);\r\n    }\r\n  },\r\n};\r\n\r\n// Export utility functions\r\nexport const formatRiskLevel = (category) => {\r\n  const levels = {\r\n    Low: { color: '#10b981', bgColor: '#ecfdf5', level: 1 },\r\n    Medium: { color: '#f59e0b', bgColor: '#fffbeb', level: 2 },\r\n    High: { color: '#ef4444', bgColor: '#fef2f2', level: 3 },\r\n    Critical: { color: '#dc2626', bgColor: '#fef2f2', level: 4 },\r\n  };\r\n  return levels[category] || levels.Medium;\r\n};\r\n\r\nexport const formatTimestamp = (timestamp) => {\r\n  return new Date(timestamp).toLocaleString();\r\n};\r\n\r\nexport const validateSensorData = (data) => {\r\n  const requiredFields = ['slope_angle', 'joint_spacing', 'rock_strength'];\r\n  const missingFields = requiredFields.filter(field => !(field in data) || data[field] === '');\r\n\r\n  if (missingFields.length > 0) {\r\n    throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\r\n  }\r\n\r\n  // Validate ranges\r\n  const validations = [\r\n    { field: 'slope_angle', min: 0, max: 90 },\r\n    { field: 'joint_spacing', min: 0, max: 10 },\r\n    { field: 'rock_strength', min: 0, max: 200 },\r\n  ];\r\n\r\n  for (const { field, min, max } of validations) {\r\n    if (data[field] !== undefined && (data[field] < min || data[field] > max)) {\r\n      throw new Error(`${field} must be between ${min} and ${max}`);\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}